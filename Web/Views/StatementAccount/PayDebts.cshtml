@model Infrastructure.Models.Residence
@{
    ViewBag.Title = "Pay Debts";
}

<h2>Pay Debts</h2>


@using (Html.BeginForm("SetDebtsAsPaid", "StatementAccount", FormMethod.Post, new { enctype = "multipart/form-data", @id = "myForm", onsubmit = "return validateForm()" }))
{
    <hr />
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-group my-3">
            <label class="control-label">Pending Debts</label>
            <div class="col-md-12">
                @Html.DropDownList("selectedDebts",
               (MultiSelectList)ViewBag.PendingDebts,
               htmlAttributes: new { @class = "form-control", multiple = "multiple", @id = "listItems", required="required", data_val = "true", data_val_required = "You must select at least one option." })
            </div>
            <label class="control-label mt-1">Total</label>
            <input type="text" class="form-control" id="InputTotal" readonly="readonly" required>
        </div>

        <div class="form-group my-3">
            <label class="control-label col-md-2">Payment Method</label>
            <div class="form-check">
                <input class="form-check-input" type="radio" name="flexRadioDefault" id="flexRadioDefault2" checked required>
                <label class="form-check-label" for="flexRadioDefault2">
                    <img src="~/images/pngwing.com.png" alt="Credit Card" width="100">
                </label>
            </div>
        </div>

        <div class="form-group my-2">
            <label for="InputName" class="form-label">Cardholder Name</label>
            <input type="text" class="form-control" id="InputName" aria-describedby="InputName" name="CardholderName" required oninvalid="this.setCustomValidity('Please enter your cardholder name')" oninput="setCustomValidity('')">
           
        </div>

        <div class="form-group my-2">
            <label for="InputCardN" class="form-label">Card Number</label>
            <input type="text" class="form-control" id="InputCardN" aria-describedby="InputCardN" name="CardNumber" placeholder="**** **** **** ****" required oninvalid="this.setCustomValidity('Please enter your card number')" oninput="setCustomValidity('')">
        </div>

        <div class="form-group my-2 d-flex gap-3">
            <div class="w-50">
                <label for="InputExpire" class="form-label">Expire</label>
                <input type="text" class="form-control" id="InputExpire" aria-describedby="InputExpire" placeholder="MM/YY" required oninvalid="this.setCustomValidity('Please enter the expiration date in MM/YY format')" oninput="setCustomValidity('')">
            </div>
            <div class="w-50">
                <label for="InputCode" class="form-label">Security Code</label>
               
                <input type="text" class="form-control" id="InputCode" pattern="[0-9]{3}" title="Please enter a valid 3-digit security code" aria-describedby="InputCode" placeholder="CVC" minlength="3" required">
            </div>
        </div>



        <div class="form-group mt-3">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Pay" class="btn btn-primary " />
            </div>
        </div>

    </div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
<script>
    var card = document.getElementById('InputCardN');
    var cname = document.getElementById('InputName');
    var expire = document.getElementById('InputExpire');
    var code = document.getElementById('InputCode');


    $(document).ready(function () {

        var listItems = $('#listItems');
        var total = $('#InputTotal');


        listItems.change(function () {
            var selectedOptions = listItems.find('option:selected');
            var auxTotal = 0;

            selectedOptions.each(function () {
                var texto = $(this).text();
                var price = parseFloat(texto.split('$')[1]);
                auxTotal += price;
            });


            total.val(auxTotal.toFixed(2));
        });

    });


    

    function validateForm() {
        // Accede a los campos del formulario
        var card = $('#InputCardN');
        var cname = $('#InputName');
        var expire = $('#InputExpire');
        var code = $('#InputCode');

        // Validación de campos
        var selectedOptions = document.getElementById("listItems").selectedOptions;
        if (selectedOptions.length == 0) {
            alert("Please select at least one debt");
            return false;
        }
        

        if (card.val().length !== 16 || !/^[0-9]+$/.test(card.val())) {
            alert('Please enter a valid card number');
            card.addClass('is-invalid');
            return false;
        } else {
            card.removeClass('is-invalid');
        }

        if (cname.val().length < 2 || !(/^[a-zA-Z\s]+$/.test(cname.val()))) {
            alert('Please enter a valid Cardholder name');
            cname.addClass('is-invalid');
            return false;
        } else {
            cname.removeClass('is-invalid');
        }

        if (code.val().length !== 3 || !/^[0-9]+$/.test(code.val())) {
            alert('Please enter a valid security code');
            code.addClass('is-invalid');
            return false;
        } else {
            code.removeClass('is-invalid');
        }

        // Obtener la fecha actual
        var now = new Date();
        var currentMonth = now.getMonth() + 1; // Sumar 1 porque getMonth() devuelve un valor de 0 a 11
        var currentYear = now.getFullYear();

        // Validar el formato de la fecha
        if (!/^\d{2}\/\d{2}$/.test(expire.val())) {
            alert('Please enter a valid expiration date');
            expire.addClass('is-invalid');
            return false;
        }

        // Obtener los valores de mes y año
        var month = parseInt(expire.val().substring(0, 2));
        var year = parseInt(expire.val().substring(3, 5)) + 2000; // Sumar 2000 porque se está usando un formato YY

        // Validar que el mes y año sean válidos
        if (month < 1 || month > 12 || year < currentYear) {
            alert('Please enter a valid expiration date');
            expire.addClass('is-invalid');
            return false;
        } else if (year === currentYear && month < currentMonth) {
            alert('The card has expired');
            expire.addClass('is-invalid');
            return false;
        } else {
            expire.removeClass('is-invalid');
            return true;
        }


        

        // Si todas las validaciones son exitosas, devuelve true
        return true;
    }


</script>
}


